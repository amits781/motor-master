package com.aidyn.arduino.motor.service;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import com.aidyn.arduino.motor.config.ArduinoConnection;
import com.aidyn.arduino.motor.dao.MotorDao;
import com.aidyn.arduino.motor.domain.Motor;
import com.aidyn.arduino.motor.utils.ArduinoListner;
import com.aidyn.arduino.motor.utils.MotorRabbitMQInterruptSender;
import com.fazecast.jSerialComm.SerialPort;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class MotorService {

  private static Boolean INTERRUPT_GENERATED = false;

  private static Boolean POWER_FAIL = false;

  private static String pStat;

  private static Motor motorQuery;

  @Autowired
  MotorDao dao;

  @Autowired
  private MotorRabbitMQInterruptSender rabbitInterruptSender;

  @Autowired
  private MotorRabbitMQInterruptSender rabbitGsheetSender;


  @Value("${default.motor.id}")
  private Integer defaultId;

  @Scheduled(fixedDelay = 1000)
  public void getPowerStatus() {
    if (ArduinoListner.getIsInit()) {
      if (!ArduinoListner.getPStatus().equals(pStat)) {
        pStat = ArduinoListner.getPStatus();
        rabbitInterruptSender.send(pStat);
      }
    }
  }

  @Scheduled(fixedDelay = 40000)
  public void queryPowerStatus() {
    if (ArduinoListner.getIsInit() && !POWER_FAIL) {
      if (motorQuery == null) {
        motorQuery = getMotorById(defaultId);
      }
      if (motorQuery != null) {
        if (motorQuery.getStatus().equals("off")) {
          SerialPort sp = ArduinoConnection.getConnection();
          if (sp.openPort()) {
            log.debug("Port opened sucessfully");
            try {
              Thread.sleep(4000);
              String action = "query:" + 1;
              sp.getOutputStream().write(action.getBytes());
              log.debug("Sent query: " + action);
              sp.getOutputStream().flush();
            } catch (InterruptedException | IOException e) {
              log.error(e.getLocalizedMessage());
            } finally {
              String action = "query:" + 0;
              try {
                Thread.sleep(4000);
                sp.getOutputStream().write(action.getBytes());
                sp.getOutputStream().flush();
              } catch (IOException | InterruptedException e) {
                log.error("Failed to initialize data." + e.getLocalizedMessage());
              }

            }
          } else {
            log.error("Failed to open port");
            return;
          }
        }
      } else {
        log.error("Motor for id: " + defaultId + "not found.");
      }
    }
  }

  public Motor getMotorById(Integer id) {
    Optional<Motor> motor = dao.getById(id);
    if (motor.isPresent()) {
      return motor.get();
    }
    log.error("Motor for id: " + id + "not found.");
    return null;
  }

  public Motor saveMotor(Motor motor) {
    if (motor != null) {

      return dao.save(motor);
    }
    log.error("Motor cannot be null");
    return null;
  }

  public List<Motor> getAllMotors() {
    return dao.getAll();
  }

  public void startMotor(SerialPort sp) throws IOException, InterruptedException {
    Thread.sleep(2000);
    String action = "action:start";
    sp.getOutputStream().write(action.getBytes());
    log.debug("Sent : " + action);
    Thread.sleep(2000);
  }

  public void stopMotor(SerialPort sp) throws IOException, InterruptedException {
    Thread.sleep(2000);
    String action = "action:stop";
    sp.getOutputStream().write(action.getBytes());
    log.debug("Sent : " + action);
    Thread.sleep(2000);
  }

  public void generateInterrupt() {
    INTERRUPT_GENERATED = true;
  }

  public void updatePower(Boolean value) {
    POWER_FAIL = value;
  }

  public void runMotor(Integer duration) throws InterruptedException, IOException {

    Boolean motorCheck = initMotor(duration);

    if (!motorCheck) {
      rabbitGsheetSender.send("error:motor already runing. Aborting");
      return;
    }

    SerialPort sp = ArduinoConnection.getConnection();
    if (sp.openPort()) {
      log.debug("Port opened sucessfully");
      Thread.sleep(4000);
    } else {
      log.error("Failed to open port");
      return;
    }



    // stopMotor(sp);
    // sp.getOutputStream().flush();
    startMotor(sp);
    sp.getOutputStream().flush();
    int i;
    for (i = 0; i <= duration; i++) {
      if (INTERRUPT_GENERATED || checkPowerFail()) {
        String reason = INTERRUPT_GENERATED ? "User Terminated" : "Power Fail";
        log.debug("Interrupt Generated by:" + reason);
        break;
      }
      String action = "display:" + i + "|" + duration;
      if (i % 5 == 0) {
        sp.getOutputStream().write(action.getBytes());
        log.debug("Sent seconds: " + action);
        sp.getOutputStream().flush();
        rabbitGsheetSender.send("status:on:" + i + ":" + (duration - i));
      }
      Thread.sleep(1000);
    }
    stopMotor(sp);
    if (checkPowerFail() && i < duration) {
      rabbitInterruptSender.send("MStop:" + i + ":" + duration);
    } else if (INTERRUPT_GENERATED) {
      rabbitInterruptSender.send("Ter:" + i + ":" + duration);
    } else {
      handleFinishJob(duration);
    }
  }


  private void handleFinishJob(Integer duration) {
    Motor motor = getMotorById(defaultId);
    if (motor != null) {
      motor.setTerReason("finished");
      motor.setIsAutostart(false);
      motor.setSecondsRem(0);
      motor.setSecondsTot(0);
      motor.setTotalDurationRan(duration);
      motor.setStopTime(LocalDateTime.now());
      motor.setStatus("off");
      motorQuery = saveMotor(motor);
      log.info("Saved motor status: Time rem:" + (duration));
      rabbitGsheetSender.send("status:off:" + motor.getSecondsRem() + ":" + motor.getSecondsTot());
    } else {
      log.error("No Motor found");
    }
  }

  private Boolean checkPowerFail() {
    return !(ArduinoListner.getIsInit() && POWER_FAIL);
  }

  public void handlePowerFail(int i, Integer duration) {
    Motor motor = getMotorById(defaultId);
    if (motor != null) {
      motor.setTerReason("power");
      motor.setIsAutostart(true);
      motor.setSecondsRem(duration - i);
      motor.setSecondsTot(duration);
      motor.setTotalDurationRan(i);
      motor.setStopTime(LocalDateTime.now());
      motor.setStatus("off");
      motorQuery = saveMotor(motor);
      log.info("Saved motor status: Time rem:" + (duration - i));
      rabbitGsheetSender.send("status:off:" + motor.getSecondsRem() + ":" + motor.getSecondsTot());
    } else {
      log.error("No Motor found");
    }
  }


  public void handleUserTermination(int i, Integer duration) {
    Motor motor = getMotorById(defaultId);
    if (motor != null) {
      motor.setTerReason("user");
      motor.setIsAutostart(false);
      motor.setSecondsRem(duration - i);
      motor.setSecondsTot(duration);
      motor.setTotalDurationRan(i);
      motor.setStopTime(LocalDateTime.now());
      motor.setStatus("off");
      motorQuery = saveMotor(motor);
      log.info("Saved motor status: Time rem:" + (duration - i));
      INTERRUPT_GENERATED = false;
      rabbitGsheetSender.send("status:off:" + motor.getSecondsRem() + ":" + motor.getSecondsTot());
    } else {
      log.error("No Motor found");
    }
  }

  public Boolean initMotor(Integer duration) {
    Motor motor = getMotorById(defaultId);
    if (motor != null && motor.getStatus().equalsIgnoreCase("on")) {
      log.error("Motor already running");
      return false;
    }
    if (motor != null) {
      motor.setTerReason("");
      motor.setIsAutostart(false);
      motor.setSecondsRem(duration);
      motor.setSecondsTot(duration);
      motor.setTotalDurationRan(0);
      motor.setStartTime(LocalDateTime.now());
      motor.setStatus("on");
      motorQuery = saveMotor(motor);
      log.info("Saved motor status: Time rem:" + (duration));
      return true;
    } else {
      log.error("No Motor found");
      return false;
    }
  }

  public Motor initMotor() {
    Motor motor = getMotorById(defaultId);
    if (motor == null) {
      Motor newMotor = new Motor();
      newMotor.setTerReason("none");
      newMotor.setIsAutostart(false);
      newMotor.setSecondsRem(0);
      newMotor.setSecondsTot(0);
      newMotor.setStatus("off");
      return saveMotor(newMotor);
    } else {
      return motor;
    }

  }

}
